{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Extensions Opentelemetry","text":"<p>This package is a wrapper around the opentelemetry package and allows you to easily emit logs, traces and metrics to an opentelemetry collector.  It consists of helper function to setup opentelemetry and configure export to the otel collecotr running on the cluster</p>"},{"location":"#opentelemetry-configuration","title":"Opentelemetry Configuration","text":"<p>Configure logging with optional OpenTelemetry integration.</p> <p>Parameters:</p> Name Type Description Default <code>handlers</code> <code>list[Handler] | None</code> <p>List of logging handlers to be added, by default None.</p> <code>None</code> <code>level</code> <code>int</code> <p>Logging level to be set, by default logging.INFO.</p> <code>INFO</code> <code>enable_otel</code> <code>bool</code> <p>Flag to enable OpenTelemetry integration, by default False.</p> <code>False</code> <p>Returns:</p> Type Description <code>None</code> Notes <p>This function configures logging for the application. If <code>handlers</code> is not provided, a console handler is added by default. Custom exception handlers are set for uncaught exceptions in both the main thread and other threads. If <code>enable_otel</code> is True, OpenTelemetry integration is enabled.</p> Source code in <code>extensions/opentelemetry/config.py</code> <pre><code>def configure_opentelemetry(\n        handlers: list[logging.Handler] | None = None,\n        level: int = logging.INFO,\n        enable_otel: bool = False\n):\n    \"\"\"\n    Configure logging with optional OpenTelemetry integration.\n\n    Parameters\n    ----------\n    handlers : list[logging.Handler] | None, optional\n        List of logging handlers to be added, by default None.\n    level : int, optional\n        Logging level to be set, by default logging.INFO.\n    enable_otel : bool, optional\n        Flag to enable OpenTelemetry integration, by default False.\n\n    Returns\n    -------\n    None\n\n    Notes\n    -----\n    This function configures logging for the application. If `handlers` is not provided,\n    a console handler is added by default. Custom exception handlers are set for\n    uncaught exceptions in both the main thread and other threads. If `enable_otel`\n    is True, OpenTelemetry integration is enabled.\n    \"\"\"\n    if handlers is None:\n        handlers = []\n\n    # Set custom exception handlers\n    sys.excepthook = exception_handler # type: ignore\n    threading.excepthook = exception_handler # type: ignore\n\n    # Console handler for basic logging\n    console_handler = logging.StreamHandler()\n    handlers.append(console_handler)\n    # Configure root logger\n    logging.basicConfig(\n        level=level,\n        handlers=handlers,\n        force=True\n    )\n\n    if enable_otel:\n        enable_opentelemetry_export()\n</code></pre>"},{"location":"#enable-exporters","title":"Enable Exporters","text":"<p>Enable OpenTelemetry exporting.</p> <p>This function enables exporting for OpenTelemetry logging, tracing, and metrics.</p> Source code in <code>extensions/opentelemetry/config.py</code> <pre><code>def enable_opentelemetry_export():\n    \"\"\"\n    Enable OpenTelemetry exporting.\n\n    This function enables exporting for OpenTelemetry logging, tracing, and metrics.\n    \"\"\"\n    configure_otel_log_exporting()\n    configure_otel_trace_export()\n    configure_otel_metrics_export()\n</code></pre>"},{"location":"#configure-log-export","title":"Configure Log Export","text":"<p>Configure OpenTelemetry logging exporting.</p> <p>This function configures the OpenTelemetry logging exporter to export logs.</p> Source code in <code>extensions/opentelemetry/config.py</code> <pre><code>def configure_otel_log_exporting():\n    \"\"\"\n    Configure OpenTelemetry logging exporting.\n\n    This function configures the OpenTelemetry logging exporter to export logs.\n    \"\"\"\n    logger = logging.getLogger()\n    provider = LoggerProvider(resource=_resources)\n    provider.add_log_record_processor(BatchLogRecordProcessor(OTLPLogExporter()))\n    logger.addHandler(LoggingHandler(logger_provider=provider))\n</code></pre>"},{"location":"#configure-trace-export","title":"Configure Trace Export","text":"<p>Configure OpenTelemetry trace exporting.</p> <p>This function configures the OpenTelemetry trace exporter to export traces.</p> Source code in <code>extensions/opentelemetry/config.py</code> <pre><code>def configure_otel_trace_export():\n    \"\"\"\n    Configure OpenTelemetry trace exporting.\n\n    This function configures the OpenTelemetry trace exporter to export traces.\n    \"\"\"\n    trace_provider = TracerProvider(resource=_resources)\n    trace_exporter = OTLPSpanExporter()  # Update with your endpoint\n    trace_provider.add_span_processor(BatchSpanProcessor(trace_exporter))\n\n    opentelemetry.trace.set_tracer_provider(trace_provider)\n</code></pre>"},{"location":"#configure-metrics-export","title":"Configure Metrics Export","text":"<p>Configure OpenTelemetry metrics exporting.</p> <p>This function configures the OpenTelemetry metrics exporter to export metrics.</p> Source code in <code>extensions/opentelemetry/config.py</code> <pre><code>def configure_otel_metrics_export():\n    \"\"\"\n    Configure OpenTelemetry metrics exporting.\n\n    This function configures the OpenTelemetry metrics exporter to export metrics.\n    \"\"\"\n    metric_exporter = OTLPMetricExporter()  # Update with your endpoint\n\n    reader = PeriodicExportingMetricReader(\n        exporter=metric_exporter,\n        export_interval_millis=15_000\n    )\n    metric_provider = MeterProvider(resource=_resources, metric_readers=[reader])\n    opentelemetry.metrics.set_meter_provider(metric_provider)\n</code></pre>"}]}